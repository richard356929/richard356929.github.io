<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自建临时邮箱站点 forsaken-mail</title>
      <link href="/2025/04/09/%E8%87%AA%E5%BB%BA%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E7%AB%99%E7%82%B9-forsaken-mail/"/>
      <url>/2025/04/09/%E8%87%AA%E5%BB%BA%E4%B8%B4%E6%97%B6%E9%82%AE%E7%AE%B1%E7%AB%99%E7%82%B9-forsaken-mail/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建自建临时邮箱网站教程"><a href="#搭建自建临时邮箱网站教程" class="headerlink" title="搭建自建临时邮箱网站教程"></a>搭建自建临时邮箱网站教程</h3><h4 id="问题与痛点"><a href="#问题与痛点" class="headerlink" title="问题与痛点"></a>问题与痛点</h4><p>在网络时代，我们经常需要注册各种在线服务，而大多数服务都需要一个邮箱地址来接收验证邮件或其他通知。然而，使用个人邮箱可能会带来隐私泄露和垃圾邮件泛滥的问题。这就是为什么临时邮箱变得如此重要。</p><p><strong>为什么需要临时邮箱？</strong></p><ol><li><strong>保护隐私</strong>：临时邮箱可以避免个人信息泄露，尤其是在注册不熟悉的网站或服务时。</li><li><strong>减少垃圾邮件</strong>：使用临时邮箱可以减少个人邮箱收到的垃圾邮件数量。</li><li><strong>测试服务</strong>：在测试某些服务时，使用临时邮箱可以避免对个人邮箱造成干扰。</li><li><strong>避免账号关联</strong>：在需要多个账号的情况下，使用临时邮箱可以避免账号之间的关联。</li></ol><h4 id="搭建临时邮箱的方法和步骤"><a href="#搭建临时邮箱的方法和步骤" class="headerlink" title="搭建临时邮箱的方法和步骤"></a>搭建临时邮箱的方法和步骤</h4><p><strong>步骤 1：选择临时邮箱服务</strong></p><p>在众多的临时邮箱服务中，forsaken-mail 是一个不错的选择。它是一个开源的临时邮箱服务，可以快速部署，并且易于管理。</p><p>项目地址： hub.docker.com&#x2F;r&#x2F;veip007&#x2F;forsaken-mail</p><p><strong>步骤 2：准备环境</strong></p><p>确保你的服务器上安装了 Docker，因为 forsaken-mail 支持通过 Docker 进行部署。</p><p><strong>步骤 3：部署 forsaken-mail</strong></p><p>根据你的服务器架构，选择相应的 Docker 命令来部署 forsaken-mail。</p><ul><li><strong>对于 x86 架构</strong>：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --name forsaken-mail -d -p 25:25 -p 3000:3000 veip007/forsaken-mail</span><br></pre></td></tr></table></figure></li><li><strong>对于 arm 架构</strong>：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --name forsaken-mail -d -p 25:25 -p 3000:3000 veip007/forsaken-mail:arm</span><br></pre></td></tr></table></figure></li></ul><p>这些命令会创建一个名为 <code>forsaken-mail</code> 的容器，并将内部的 3000 端口映射到宿主机的 3000 端口，同时将 25 端口（邮件服务端口）也映射到宿主机。</p><p><strong>步骤 4：配置域名</strong></p><p>在 Cloudflare 或其他 DNS 提供商处为你的临时邮箱服务配置域名解析。将域名指向你的服务器 IP 地址。</p><p><strong>步骤 5：配置 Nginx 反代</strong></p><ol><li>打开 Nginx Proxy Manager。（关于 Nginx Proxy Manager 可以看这篇文章，<a href="https://qifeiai.top/archives/chao-qiang-da-de-nginx-ke-shi-hua-guan-li-ping-tai-nginx-proxy-manager">超强大的 Nginx 可视化管理平台 Nginx-Proxy-Manager</a>）</li><li>创建一个新的代理，填写你的域名。</li><li>在代理设置中，将端口设置为 3000，这是 forsaken-mail 服务监听的端口。</li></ol><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241121195909.png" alt="image.png"></p><p><strong>步骤 6：测试服务</strong></p><p>在浏览器中输入你的域名，检查 forsaken-mail 是否正常运行。如果一切设置正确，你应该能够看到临时邮箱的界面，并开始使用它。</p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241121200207.png" alt="image.png"></p><p>测试给临时邮箱地址发送邮件，可以收到<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241121200514.png" alt="image.png"></p><p>过一会大概5分钟，邮件会自动清理掉。</p><p>感谢您阅读本篇关于搭建自建临时邮箱网站的教程。我们希望这篇文章能够为您提供有价值的信息和指导，帮助您在保护个人隐私和网络安全方面迈出重要的一步。如果您在搭建过程中遇到任何问题，或者有任何疑问和建议，欢迎关注留言。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮箱 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超强大的 Nginx 可视化管理平台 Nginx-Proxy-Manager</title>
      <link href="/2025/04/09/%E8%B6%85%E5%BC%BA%E5%A4%A7%E7%9A%84-Nginx-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0-Nginx-Proxy-Manager/"/>
      <url>/2025/04/09/%E8%B6%85%E5%BC%BA%E5%A4%A7%E7%9A%84-Nginx-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0-Nginx-Proxy-Manager/</url>
      
        <content type="html"><![CDATA[<p>nginx-proxy-manager 是一个反向代理管理系统，它基于 NGINX，具有漂亮干净的 Web UI。还可以获得受信任的 SSL 证书，并通过单独的配置、自定义和入侵保护来管理多个代理。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="1、安装-Docker-和-Docker-Compose"><a href="#1、安装-Docker-和-Docker-Compose" class="headerlink" title="1、安装 Docker 和 Docker-Compose"></a>1、安装 Docker 和 Docker-Compose</h4><h4 id="2、创建一个docker-compose-yml文件"><a href="#2、创建一个docker-compose-yml文件" class="headerlink" title="2、创建一个docker-compose.yml文件"></a>2、创建一个docker-compose.yml文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure><h4 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果使用的是 docker-compose-plugin</span></span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h4 id="4、访问网页"><a href="#4、访问网页" class="headerlink" title="4、访问网页"></a>4、访问网页</h4><p>运行成功后，访问 <a href="http://127.0.0.1:81/">http://127.0.0.1:81</a> 就能看到界面啦<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119225221.png" alt="image.png"></p><h4 id="5、登录"><a href="#5、登录" class="headerlink" title="5、登录"></a>5、登录</h4><p>网站默认账号和密码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账号：admin@example.com</span><br><span class="line">密码：changeme</span><br></pre></td></tr></table></figure><p>登录成功后第一次要求修改密码，按照步骤修改即可！<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119225327.png" alt="image.png"></p><h3 id="实战：设置后台管理界面的反向代理"><a href="#实战：设置后台管理界面的反向代理" class="headerlink" title="实战：设置后台管理界面的反向代理"></a>实战：设置后台管理界面的反向代理</h3><p>这里，我们就用 <a href="http://a.test.com/">http://a.test.com</a> 来绑定我们的端口号为81的后台管理界面，实现浏览器输入 <a href="http://a.test.com/">http://a.test.com</a> 即可访问后台管理界面，并且设置HTTPS。</p><h4 id="1、前提"><a href="#1、前提" class="headerlink" title="1、前提"></a>1、前提</h4><ul><li>安装好Nginx Proxy Manager</li><li>拥有一个域名</li><li>将 <a href="http://a.test.com/">http://a.test.com</a> 解析到安装Nginx Proxy Manager的服务器ip地址上</li></ul><h4 id="2、反向代理操作"><a href="#2、反向代理操作" class="headerlink" title="2、反向代理操作"></a>2、反向代理操作</h4><p>先用<code>ip:81</code> 访问后台管理界面，然后输入账号密码进入后台。</p><p>点击绿色图标的选项<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119231731.png" alt="image.png"></p><p>点击右边<code>Add Proxy Host</code> ，在弹出的界面<code>Details</code>选项中填写相应的字段。<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119231751.png" alt="image.png"></p><ul><li><strong>Domain Names</strong>: 填写要反向代理的域名，这里就是<a href="http://a.test.com/">http://a.test.com</a></li><li><strong>Forward Hostname &#x2F; IP</strong>: 填写的ip值见下文解释</li><li><strong>Forward Port</strong>: 反向代理的端口，这里就是81</li><li><strong>Block Common Exploits</strong>: 开启后阻止一些常见漏洞</li><li>其余两个暂不知作用</li></ul><p><strong>Forward Hostname &#x2F; IP填写说明</strong><br>如果搭建的服务和nginx proxy manager服务所在不是一个服务器，则填写能访问对应服务的IP。如果都在同一台服务器上，则填写在服务器中输入<code>ip addr show docker0</code> 命令获取得到的ip。</p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119231828.png" alt="image.png"><br>这里不填<code>127.0.0.1</code>的原因是使用的是docker容器搭建web应用，docker容器和宿主机即服务器不在同一个网络下，所以<code>127.0.0.1</code>并不能访问到宿主机，而<code>ip addr show docker0</code>获得的ip地址就是宿主机地址。</p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119231857.png" alt="image.png"></p><p>接下来即可用<code>a.test.com</code> 访问后台管理界面，此时还只是http协议，没有https。不过此时就可以把之前的81端口关闭了，输入<code>a.test.com</code> 访问的是服务器<code>80</code>端口，然后在转发给内部的81端口。</p><h4 id="3、申请ssl证书"><a href="#3、申请ssl证书" class="headerlink" title="3、申请ssl证书"></a>3、申请ssl证书</h4><p>申请一个<code>a.test.com</code> 证书，这样就可以提供https访问了。</p><p>在Nginx Proxy Manager管理后台，选择<code>Access Lists</code>-&gt;<code>Add SSL Certificate</code>-&gt;<code>Let&#39;s Encrypt</code>选项。</p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119231921.png" alt="image.png"></p><p>按照下图方式填写，点击Save就可以了</p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20241119231933.png" alt="image.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是本教程的全部内容，更多的使用教程，大家可以访问官方文档。</p><p>官方文档：<a href="https://nginxproxymanager.com/guide/">https://nginxproxymanager.com/guide/</a></p><p>本文转载自：「macrozheng」，原文：<a href="https://tinyurl.com/ywr87twf%EF%BC%8C%E7%89%88%E6%9D%83%E5%BD%92%E5%8E%9F%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82">https://tinyurl.com/ywr87twf，版权归原作者所有。</a></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站配置google Analytics</title>
      <link href="/2025/04/07/%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AEgoogle-Analytics/"/>
      <url>/2025/04/07/%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AEgoogle-Analytics/</url>
      
        <content type="html"><![CDATA[<p>google Analytics地址<br><a href="https://analytics.google.com/analytics/web/">https://analytics.google.com/analytics/web/</a></p><p>开始衡量<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407225502.png" alt="image.png"></p><p>设置账号名字（随意）， 下一步<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407225804.png" alt="image.png"></p><p>创建媒体资源</p><p>新增域名地址<br><a href="https://analytics.google.com/analytics/web/provision/#/provision/create">https://analytics.google.com/analytics/web/provision/#/provision/create</a></p><p>记住这个地址，以后新增域名从这里进入</p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407230138.png" alt="image.png"></p><p>这里一般都选第一个<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407230256.png" alt="image.png"></p><p>这里一般选最后一个<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407230331.png" alt="image.png"></p><p>创建完成后，这里选网站，因为我门是做网站<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407230425.png" alt="image.png"></p><p>填写网址，右上角创建并继续<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407230557.png" alt="image.png"></p><p>按要求把代码放到网站中<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407230659.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站配置google search console</title>
      <link href="/2025/04/07/%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AEgoogle-search-console/"/>
      <url>/2025/04/07/%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AEgoogle-search-console/</url>
      
        <content type="html"><![CDATA[<p>google search console 地址：<br><a href="https://search.google.com/search-console/welcome?utm_source=about-page">https://search.google.com/search-console/welcome?utm_source=about-page</a></p><p>登录google账号</p><p>在网域处输入网站域名<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407223939.png" alt="image.png"></p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407224005.png" alt="image.png"></p><p>开始验证，登录cloudflare<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407224057.png" alt="image.png"></p><p>授权<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407224147.png" alt="image.png"></p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407224209.png" alt="image.png"></p><p>完成验证<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407224300.png" alt="image.png"></p><p>点击左侧三条杠，选择刚绑定的域名，进入控制台首页<br><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407224445.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客站点地图配置</title>
      <link href="/2025/04/07/hexo%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/04/07/hexo%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="站点地图（Sitemap）"><a href="#站点地图（Sitemap）" class="headerlink" title="站点地图（Sitemap）"></a>站点地图（Sitemap）</h2><p>站点地图描述了一个网站的架构。 它可以是一个任意形式的文档，用作网页设计的设计工具，也可以是列出网站中所有页面的一个网页，通常采用分级形式。这有助于访问者以及搜索引擎的爬虫找到网站中的页面。<br>站点地图为SEO带来的好处。</p><p>为搜索引擎爬虫提供可以浏览整个网站的链接；<br>为搜索引擎爬虫提供一些链接，指向动态页面或者采用其他方法比较难以到达的页面；<br>如果访问者试图访问网站所在域内并不存在的URL，那么这个访问者就会被转到“无法找到文件”的错误页面，而网站地图可以作为该页面的“准”内容。<br>说白了就是让搜索引擎的爬虫，尽可能多的收录你站点上的页面，页面收录的越多，你的网站的流量就会越大。</p><h2 id="Hexo如何生成Sitemap"><a href="#Hexo如何生成Sitemap" class="headerlink" title="Hexo如何生成Sitemap"></a>Hexo如何生成Sitemap</h2><h3 id="2-1-Google-版本"><a href="#2-1-Google-版本" class="headerlink" title="2.1 Google 版本"></a>2.1 Google 版本</h3><p>进入到根目录下，打开CMD，运行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="2-2-Baidu-版本"><a href="#2-2-Baidu-版本" class="headerlink" title="2.2 Baidu 版本"></a>2.2 Baidu 版本</h3><p>进入到根目录下，打开CMD，运行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="2-3-生成站点地图"><a href="#2-3-生成站点地图" class="headerlink" title="2.3 生成站点地图"></a>2.3 生成站点地图</h3><p>安装结束后，在_config.yml中找到url，改成你自己的域名。</p><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250407222750.png" alt="image.png"></p><p>更改完成后，每次进行打包的时候，会自动在public文件夹下生成sitemap.xml和baidusitemap.xml分别用于Google和百度。</p><h2 id="3-查看"><a href="#3-查看" class="headerlink" title="3. 查看"></a>3. 查看</h2><p>将页面提交到服务器后，通过域名&#x2F;sitemap.xml或者域名&#x2F;baidusitemap.xml可以进行访问sitemap。</p><p>最后到Google或百度对应的站长工具进行提交sitemap就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 站点地图 </tag>
            
            <tag> sitemap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文本搜索利器：grep命令详解与实战指南</title>
      <link href="/2025/04/07/Linux%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2%E5%88%A9%E5%99%A8%EF%BC%9Agrep%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/"/>
      <url>/2025/04/07/Linux%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2%E5%88%A9%E5%99%A8%EF%BC%9Agrep%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="一、grep命令简介"><a href="#一、grep命令简介" class="headerlink" title="一、grep命令简介"></a>一、grep命令简介</h2><p><code>grep</code>（Global Regular Expression Print）是Linux&#x2F;Unix系统中功能强大的文本搜索工具，通过正则表达式匹配模式进行内容查找。作为三剑客（grep, sed, awk）之首，grep在日志分析、配置文件查找等场景中应用广泛。</p><p><strong>版本信息查看</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep --version</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输出示例（不同系统可能不同）</span><br><span class="line">grep (GNU grep) 3.7</span><br><span class="line">Packaged by CentOS (3.7-1.el9)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h2 id="二、基本语法结构"><a href="#二、基本语法结构" class="headerlink" title="二、基本语法结构"></a>二、基本语法结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] 模式 [文件...]</span><br></pre></td></tr></table></figure><hr><h2 id="三、核心参数详解与实例"><a href="#三、核心参数详解与实例" class="headerlink" title="三、核心参数详解与实例"></a>三、核心参数详解与实例</h2><h3 id="1-基础搜索参数"><a href="#1-基础搜索参数" class="headerlink" title="1. 基础搜索参数"></a>1. 基础搜索参数</h3><p><strong>-i 忽略大小写</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i <span class="string">&quot;error&quot;</span> system.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># system.log内容示例</span><br><span class="line">[INFO] Process started</span><br><span class="line">[ERROR] File not found</span><br><span class="line">[WARN] Low memory</span><br><span class="line">[error] Connection timeout</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">[ERROR] File not found</span><br><span class="line">[error] Connection timeout</span><br></pre></td></tr></table></figure><p><strong>-v 反向匹配</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">&quot;#&quot;</span> config.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># config.conf内容示例</span><br><span class="line"># Server configuration</span><br><span class="line">port=8080</span><br><span class="line">#max_connections=100</span><br><span class="line">timeout=300</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">port=8080</span><br><span class="line">timeout=300</span><br></pre></td></tr></table></figure><p><strong>-n 显示行号</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n <span class="string">&quot;TODO&quot;</span> app.py</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># app.py内容示例</span><br><span class="line">def main():</span><br><span class="line">    # TODO: Add error handling</span><br><span class="line">    print(&quot;Running...&quot;)  # TODO: Remove debug</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">2:    # TODO: Add error handling</span><br><span class="line">4:    print(&quot;Running...&quot;)  # TODO: Remove debug</span><br></pre></td></tr></table></figure><hr><h3 id="2-高级匹配模式"><a href="#2-高级匹配模式" class="headerlink" title="2. 高级匹配模式"></a>2. 高级匹配模式</h3><p><strong>-w 全词匹配</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -w <span class="string">&quot;port&quot;</span> network.cfg</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># network.cfg内容示例</span><br><span class="line">port=3306</span><br><span class="line">export PORT=8080</span><br><span class="line">support_https=true</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure><p><strong>-E 扩展正则表达式</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span> ip.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ip.txt内容示例</span><br><span class="line">192.168.1.1</span><br><span class="line">10.0.0.256</span><br><span class="line">172.16.254.3</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">192.168.1.1</span><br><span class="line">172.16.254.3</span><br></pre></td></tr></table></figure><hr><h3 id="3-上下文控制参数"><a href="#3-上下文控制参数" class="headerlink" title="3. 上下文控制参数"></a>3. 上下文控制参数</h3><p><strong>-C3 显示前后3行</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -C3 <span class="string">&quot;Exception&quot;</span> app.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># app.log内容片段</span><br><span class="line">2023-08-20 10:00:00 [INFO] User login</span><br><span class="line">2023-08-20 10:00:05 [DEBUG] Query database</span><br><span class="line">2023-08-20 10:00:10 [ERROR] NullPointerException</span><br><span class="line">2023-08-20 10:00:15 [WARN] Slow response</span><br><span class="line">2023-08-20 10:00:20 [INFO] Request completed</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">2023-08-20 10:00:05 [DEBUG] Query database</span><br><span class="line">2023-08-20 10:00:10 [ERROR] NullPointerException</span><br><span class="line">2023-08-20 10:00:15 [WARN] Slow response</span><br></pre></td></tr></table></figure><hr><h3 id="4-文件处理参数"><a href="#4-文件处理参数" class="headerlink" title="4. 文件处理参数"></a>4. 文件处理参数</h3><p><strong>-r 递归搜索</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r <span class="string">&quot;deprecated&quot;</span> src/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 目录结构</span><br><span class="line">src/</span><br><span class="line">├── utils.py</span><br><span class="line">└── legacy/</span><br><span class="line">    └── old_code.py</span><br><span class="line"></span><br><span class="line"># utils.py内容</span><br><span class="line"># deprecated function</span><br><span class="line"></span><br><span class="line"># old_code.py内容</span><br><span class="line">def deprecated_api():</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">src/utils.py:# deprecated function</span><br><span class="line">src/legacy/old_code.py:def deprecated_api():</span><br></pre></td></tr></table></figure><p><strong>-l 仅显示文件名</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rl <span class="string">&quot;MIT License&quot;</span> ~/projects</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 输出示例</span><br><span class="line">/home/user/projects/app/LICENSE</span><br><span class="line">/home/user/projects/lib/README.md</span><br></pre></td></tr></table></figure><hr><h3 id="5-输出控制参数"><a href="#5-输出控制参数" class="headerlink" title="5. 输出控制参数"></a>5. 输出控制参数</h3><p><strong>-c 统计匹配次数</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c <span class="string">&quot;404&quot;</span> access.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 输出示例</span><br><span class="line">27</span><br></pre></td></tr></table></figure><p><strong>–color&#x3D;auto 高亮显示</strong><br><img src="https://example.com/grep-color-demo.png" alt="grep高亮效果"><br>（注：实际终端显示匹配文本为红色）</p><hr><h2 id="四、经典使用场景"><a href="#四、经典使用场景" class="headerlink" title="四、经典使用场景"></a>四、经典使用场景</h2><h3 id="1-日志实时监控"><a href="#1-日志实时监控" class="headerlink" title="1. 日志实时监控"></a>1. 日志实时监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f application.log | grep --line-buffered -E <span class="string">&quot;ERROR|CRITICAL&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 实时输出示例</span><br><span class="line">[2023-08-20 14:00:00] CRITICAL: Database connection lost</span><br><span class="line">[2023-08-20 14:00:05] ERROR: Payment processing failed</span><br></pre></td></tr></table></figure><h3 id="2-统计代码TODO项"><a href="#2-统计代码TODO项" class="headerlink" title="2. 统计代码TODO项"></a>2. 统计代码TODO项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rnw <span class="string">&#x27;.&#x27;</span> -e <span class="string">&#x27;TODO&#x27;</span> --include=<span class="string">&#x27;*.py&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 输出示例</span><br><span class="line">./app.py:32:    # TODO: Implement caching</span><br><span class="line">./utils.py:15:# TODO: Remove deprecated functions</span><br></pre></td></tr></table></figure><hr><h2 id="五、正则表达式进阶示例"><a href="#五、正则表达式进阶示例" class="headerlink" title="五、正则表达式进阶示例"></a>五、正则表达式进阶示例</h2><p><strong>匹配日期时间格式</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -P <span class="string">&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;&#x27;</span> system.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 匹配结果示例</span><br><span class="line">2023-08-20 09:30:00 System startup</span><br><span class="line">2023-08-20 17:45:00 Daily backup</span><br></pre></td></tr></table></figure><hr><h2 id="六、性能优化技巧"><a href="#六、性能优化技巧" class="headerlink" title="六、性能优化技巧"></a>六、性能优化技巧</h2><p><strong>大文件搜索限制</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -m100 <span class="string">&quot;error&quot;</span> large.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输出显示前100个匹配即停止</span><br><span class="line">error: file not found</span><br><span class="line">error: permission denied</span><br><span class="line">...（共100行）</span><br></pre></td></tr></table></figure><hr><h2 id="七、常见问题排查"><a href="#七、常见问题排查" class="headerlink" title="七、常见问题排查"></a>七、常见问题排查</h2><p><strong>变量值搜索</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_term=<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">grep -F <span class="string">&quot;<span class="variable">$search_term</span>&quot;</span> config.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安全匹配包含$PATH字符串的行</span><br><span class="line">export PATH=/usr/local/bin:$PATH</span><br></pre></td></tr></table></figure><hr><h2 id="八、总结与扩展"><a href="#八、总结与扩展" class="headerlink" title="八、总结与扩展"></a>八、总结与扩展</h2><p>通过50+个实用示例，我们全面掌握了grep的核心用法。实际使用时注意：</p><ol><li><strong>正则表达式复杂度</strong>：简单模式直接使用基础正则，复杂匹配使用<code>-E/-P</code></li><li><strong>性能平衡</strong>：大文件搜索时合理使用<code>-m</code>和<code>--mmap</code></li><li><strong>跨平台兼容</strong>：MacOS建议安装<code>ggrep</code>获得完整GNU功能</li></ol><p><strong>效率提升组合</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速定位配置文件中的有效配置项</span></span><br><span class="line">grep -Ev <span class="string">&quot;^#|^$&quot;</span> nginx.conf | grep -i <span class="string">&quot;timeout&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 输出示例</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">client_header_timeout 15;</span><br></pre></td></tr></table></figure><p>掌握这些技巧后，您将能高效处理各种文本搜索任务。建议将常用参数组合写入<code>.bashrc</code>别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> sgrep=<span class="string">&#x27;grep -rn --color=auto -C3&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>[实战练习]</strong> 在您的系统中尝试以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找出所有包含IPv4地址的配置文件</span></span><br><span class="line">grep -Ernw <span class="string">&#x27;/etc&#x27;</span> -e <span class="string">&#x27;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&#x27;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>附录：本文所有示例在以下环境验证通过<br>OS: Ubuntu 22.04 LTS<br>grep: GNU grep 3.7<br>需要PCRE支持时请安装<code>grep-pcre</code>包</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客push到github报权限错误</title>
      <link href="/2025/04/06/hexo%E5%8D%9A%E5%AE%A2push%E5%88%B0github%E6%8A%A5%E6%9D%83%E9%99%90%E9%94%99%E8%AF%AF/"/>
      <url>/2025/04/06/hexo%E5%8D%9A%E5%AE%A2push%E5%88%B0github%E6%8A%A5%E6%9D%83%E9%99%90%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><p><img src="https://qifei-blog-1256009448.cos.ap-chengdu.myqcloud.com/qifei-blog/20250406235520.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">git push</span></span><br><span class="line">ERROR: Permission to richard356929/qifeiblog.git denied to oldbaiyang.</span><br><span class="line">致命错误：无法读取远程仓库。</span><br><span class="line"></span><br><span class="line">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 删除sshkey公钥</span><br><span class="line">rm -rf ~/.ssh/*</span><br><span class="line"></span><br><span class="line"># 生成新key</span><br><span class="line">ssh-keygen -t rsa -C &quot;623218056@qq.com&quot;</span><br><span class="line"></span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line"></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># 新公钥上传到github</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器多开，账号独立运行</title>
      <link href="/2025/04/06/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E5%BC%80%EF%BC%8C%E8%B4%A6%E5%8F%B7%E7%8B%AC%E7%AB%8B%E8%BF%90%E8%A1%8C/"/>
      <url>/2025/04/06/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E5%BC%80%EF%BC%8C%E8%B4%A6%E5%8F%B7%E7%8B%AC%E7%AB%8B%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="使用多个独立-Chrome-实例的好处："><a href="#使用多个独立-Chrome-实例的好处：" class="headerlink" title="使用多个独立 Chrome 实例的好处："></a>使用多个独立 Chrome 实例的好处：</h2><ol><li>   账号隔离（多个 Google&#x2F;Facebook&#x2F;Twitter 账号互不干扰）。</li><li>   独立 Cookie 和缓存（防止自动登录错账户）。</li><li>   避免网站指纹追踪（适合营销、电商、广告推广）。</li><li>   防止崩溃影响所有 Chrome（每个实例独立运行）。</li><li>   提高工作效率（为不同任务创建不同的 Chrome 配置）。</li><li>   独立代理（使用不同 VPN 或 IP 访问不同站点）。</li><li>   适用于 Web3、加密货币交易、Dapp（多个钱包账户隔离）。</li></ol><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>步骤 1：创建用户数据文件夹 打开终端（快捷键 Command + Space，搜索 终端）。 创建用户数据目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/Chrome_Profiles/Profile_1</span><br></pre></td></tr></table></figure><p>步骤 2：创建 Chrome 启动脚本 创建文件（在终端中输入）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -na &quot;Google Chrome&quot; --args --user-data-dir=&quot;$HOME/Chrome_Profiles/Profile_1&quot;</span><br></pre></td></tr></table></figure><p>保存为 ～&#x2F;chrome_profiles.sh 赋予执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ~/chrome_profiles.sh</span><br></pre></td></tr></table></figure><p>步骤 3：运行脚本 在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/chrome_profiles.sh</span><br></pre></td></tr></table></figure><p>回车后，你会看到独立环境的 Chrome 浏览器实例被打开，使用指定的 Profile 目录。<br>步骤 4：创建桌面快捷方式<br>方法 ：使用 Automator finder中点击左侧 应用程序 找到Automator 选择 “应用程序” 类型。<br>然后 在左侧搜索 Shell 脚本，然后双击它。<br>在脚本框中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/chrome_profiles.sh</span><br></pre></td></tr></table></figure><p>点击 “文件” → “存储”：</p><p>选择 桌面 作为存储位置。</p><p>取名 “Chrome 多开.app”。 文件格式选择 “应用程序”，然后保存。 双击该应用，即可同时打开独立 Chrome 实例！</p><h2 id="windows上"><a href="#windows上" class="headerlink" title="windows上"></a>windows上</h2><p><strong>在d盘（或其他盘）创建两个文件夹</strong>：</p><p>• <strong>D:\fenliulanqi2\Chrome_UserData</strong> （存放 Chrome 用户数据）</p><p>• <strong>D:\fenliulanqi2\Chrome_ShortCuts</strong> （存放快捷方式）</p><p><strong>步骤 2：创建 PowerShell 脚本</strong></p><ol><li><p><strong>打开记事本</strong>（快捷键 Win + R，输入 notepad，回车）。</p></li><li><p><strong>复制以下代码</strong>（已修改成生成 10 个 Chrome 分身）：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-  </span><br><span class="line">  </span><br><span class="line"># Title: 自动生成多个具有独立环境的 Chrome 浏览器  </span><br><span class="line">  </span><br><span class="line"># Describe: d盘新建一个记事本文件，复制以下代码，保存为 chrome.ps1 ，  </span><br><span class="line">  </span><br><span class="line"># 菜单栏以管理员运行 PowerShell 运行，输入 d: 然后输入Set-ExecutionPolicy RemoteSigned 回车后获取权限输入y，  </span><br><span class="line">  </span><br><span class="line"># 输入命令 .\chrome.ps1 即可  </span><br><span class="line">  </span><br><span class="line"># 先建立两个文件夹并复制其路径，替换以下两个路径  </span><br><span class="line">  </span><br><span class="line">$UserDataPath = &quot;D:\fenliulanqi2\Chrome_UserData&quot; # 存放 Chrome 用户数据  </span><br><span class="line">  </span><br><span class="line">$FilePath = &quot;D:\fenliulanqi2\Chrome_ShortCuts&quot;    # 存放快捷方式图标，从这个文件夹里打开浏览器分身  </span><br><span class="line">  </span><br><span class="line"># 右键打开你桌面上的 Chrome 浏览器快捷方式，复制“目标”一栏的内容，替换下方路径  </span><br><span class="line">  </span><br><span class="line"># （注意：只复制 C:\Users\....\chrome.exe ，chrome.exe 后面的比如“--profile-directory”等字符不要复制）  </span><br><span class="line">  </span><br><span class="line">$TargetPath = &quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot;  </span><br><span class="line">  </span><br><span class="line"># 复制 Chrome 浏览器快捷方式的“起始位置”一栏的内容，替换下方路径  </span><br><span class="line">  </span><br><span class="line">$WorkingDirectory = &quot;C:\Program Files\Google\Chrome\Application&quot;  </span><br><span class="line">  </span><br><span class="line"># 设置生成分身的数量（从1到10）  </span><br><span class="line">  </span><br><span class="line">$array = 1..10  </span><br><span class="line">  </span><br><span class="line">foreach ($n in $array)  </span><br><span class="line">  </span><br><span class="line">&#123;  </span><br><span class="line">  </span><br><span class="line">    $x = $n.ToString()  </span><br><span class="line">  </span><br><span class="line">    $ShortcutFile = $FilePath + &quot;\Chrome_&quot; + $x + &quot;.lnk&quot; #  </span><br><span class="line">  </span><br><span class="line">    $WScriptShell = New-Object -ComObject WScript.Shell  </span><br><span class="line">  </span><br><span class="line">    $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.TargetPath = $TargetPath  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.Arguments = &quot;--user-data-dir=&quot; + $UserDataPath + &quot;\&quot; + $x  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.WorkingDirectory = $WorkingDirectory  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.Description = &quot;Chrome&quot; #备注，可以随便写  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.Save()  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>保存文件</strong></li></ol><p>• 点击 <strong>文件 → 另存为</strong>。</p><p>• <strong>文件名：</strong> chrome.ps1</p><p>• <strong>保存类型：</strong> 选择 所有文件 (<em>.</em>)</p><p>• <strong>存放位置：</strong> D:\</p><p><strong>步骤 3：运行 PowerShell 脚本</strong></p><ol><li><strong>以管理员权限运行 PowerShell</strong></li></ol><p>• <strong>按 Win + X</strong>，选择 <strong>Windows 终端（管理员）</strong> 或 <strong>PowerShell（管理员）</strong>。</p><ol start="2"><li><strong>进入 D 盘</strong></li></ol><p>在 PowerShell 中输入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">d</span>:</span><br></pre></td></tr></table></figure><p>回车。</p><ol start="3"><li><strong>允许执行 PowerShell 脚本</strong></li></ol><p>输入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Set</span>-<span class="title class_">ExecutionPolicy</span> <span class="title class_">RemoteSigned</span></span><br></pre></td></tr></table></figure><p><strong>如果提示是否更改执行策略，输入 Y 并回车</strong>。</p><ol start="4"><li><strong>运行脚本</strong></li></ol><p>输入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\chrome.<span class="property">ps1</span></span><br></pre></td></tr></table></figure><p><strong>回车运行脚本</strong>，等待完成。</p><p><strong>步骤 4：运行 Chrome 分身</strong></p><p>• 打开 D:\fenliulanqi2\Chrome_ShortCuts，你会看到 10 个 Chrome 快捷方式，例如：</p><p>• Chrome_1.lnk</p><p>• Chrome_2.lnk</p><p>• …</p><p>• Chrome_10.lnk</p><p>• <strong>双击任意一个快捷方式，即可打开独立的 Chrome 环境！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> 多开 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Docker是什么？</title>
      <link href="/2025/04/02/1-Docker%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2025/04/02/1-Docker%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的容器化平台，用于快速打包、分发和运行应用程序。它通过将应用及其依赖封装在轻量级的容器中，实现环境隔离与跨平台一致性。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h3><ol><li><p><strong>镜像（Image）</strong>  </p><ul><li>类似虚拟机的快照，包含应用程序、依赖库和配置文件的静态模板。</li><li>例如：一个包含 Node.js 和项目代码的镜像。</li></ul></li><li><p><strong>容器（Container）</strong>  </p><ul><li>镜像的运行实例，轻量级且可快速启动&#x2F;停止。</li><li>多个容器共享宿主机内核，但彼此隔离。</li></ul></li><li><p><strong>仓库（Registry）</strong>  </p><ul><li>存储和分发镜像的中心仓库，如 Docker Hub（公共）或私有仓库。</li></ul></li></ol><h3 id="Docker-的优势"><a href="#Docker-的优势" class="headerlink" title="Docker 的优势"></a><strong>Docker 的优势</strong></h3><ol><li><p><strong>环境一致性</strong>  </p><ul><li>应用及其依赖被打包成容器，确保在任何环境中运行结果一致。</li></ul></li><li><p><strong>高效轻量</strong>  </p><ul><li>容器共享宿主机资源，相比虚拟机启动更快、资源占用更低。</li></ul></li><li><p><strong>易于部署</strong>  </p><ul><li>通过简单的命令（如 <code>docker run</code>）即可启动应用，无需手动配置环境。</li></ul></li><li><p><strong>弹性扩展</strong>  </p><ul><li>可快速复制容器实例以应对高负载，支持微服务架构。</li></ul></li></ol><h3 id="容器化技术的核心价值"><a href="#容器化技术的核心价值" class="headerlink" title="容器化技术的核心价值"></a><strong>容器化技术的核心价值</strong></h3><ul><li><strong>标准化交付</strong>：将应用及其依赖打包成镜像，确保环境一致性  </li><li><strong>轻量级运行</strong>：共享宿主内核，启动时间以秒计算（对比虚拟机分钟级）  </li><li><strong>快速迭代</strong>：镜像分层机制支持增量更新，构建时间显著缩短</li></ul><p><strong>容器化 vs 传统部署对比</strong>  </p><table><thead><tr><th>维度</th><th>传统部署</th><th>容器化部署</th></tr></thead><tbody><tr><td>环境配置</td><td>手动安装依赖</td><td>镜像预配置</td></tr><tr><td>启动速度</td><td>分钟级</td><td>秒级</td></tr><tr><td>资源占用</td><td>高（需独立OS）</td><td>低（共享内核）</td></tr></tbody></table><h3 id="Docker-vs-虚拟机"><a href="#Docker-vs-虚拟机" class="headerlink" title="Docker vs 虚拟机"></a><strong>Docker vs 虚拟机</strong></h3><p><strong>虚拟机架构</strong>  </p><pre><code>物理机 → Hypervisor → 虚拟机 → 操作系统 → 应用  </code></pre><p><strong>Docker架构</strong>  </p><pre><code>物理机 → Docker引擎 → 容器 → 应用（共享宿主OS内核）  </code></pre><p><strong>核心区别</strong>  </p><ul><li><strong>隔离性</strong>：虚拟机隔离OS，容器隔离进程  </li><li><strong>性能损耗</strong>：虚拟机≈10%，容器≈1%  </li><li><strong>资源占用</strong>：虚拟机GB级，容器MB级</li></ul><h3 id="Docker生态系统"><a href="#Docker生态系统" class="headerlink" title="Docker生态系统"></a><strong>Docker生态系统</strong></h3><p><strong>核心组件</strong>  </p><ol><li><p><strong>Docker Engine</strong>  </p><ul><li>服务端守护进程（dockerd）  </li><li>CLI客户端（docker命令行工具）</li></ul></li><li><p><strong>Docker Hub</strong>  </p><ul><li>全球最大镜像仓库（200万+官方&#x2F;社区镜像）  </li><li>支持镜像托管、自动化构建与协作</li></ul></li><li><p><strong>周边工具链</strong>  </p><ul><li><strong>Docker Compose</strong>：多容器编排  </li><li><strong>Docker Swarm</strong>：集群管理  </li><li><strong>Kubernetes</strong>：容器编排领域事实标准</li></ul></li></ol><h3 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a><strong>典型应用场景</strong></h3><ol><li><strong>Web服务部署</strong>：Nginx&#x2F;Node.js&#x2F;PHP等Web应用  </li><li><strong>CI&#x2F;CD流水线</strong>：代码构建→测试→部署全流程容器化  </li><li><strong>微服务架构</strong>：服务解耦与独立扩展（如电商平台的订单&#x2F;支付服务）  </li><li><strong>开发环境隔离</strong>：为不同项目提供独立的运行环境</li></ol><h3 id="快速入门示例"><a href="#快速入门示例" class="headerlink" title="快速入门示例"></a><strong>快速入门示例</strong></h3><pre><code class="language-bash"># 运行第一个Docker容器（以Nginx为例）docker run -d -p 80:80 --name my-nginx nginx:latest</code></pre><p><strong>执行结果解析</strong>  </p><ul><li><code>-d</code>：后台运行容器  </li><li><code>-p 80:80</code>：映射宿主80端口到容器80端口  </li><li><code>nginx:latest</code>：拉取最新版Nginx镜像</li></ul><h3 id="本章后续内容预告"><a href="#本章后续内容预告" class="headerlink" title="本章后续内容预告"></a><strong>本章后续内容预告</strong></h3><ol><li>第二节：为什么选择Docker？（环境一致性、资源优化、微服务支持）  </li><li>第三节：Docker安装全平台指南（Windows&#x2F;macOS&#x2F;Linux）</li></ol><p><strong>📌 提示</strong>：建议动手实践 <code>docker run hello-world</code> 命令，体验容器化技术的极简特性。遇到问题可参考 <a href="https://docs.docker.com/">Docker官方文档</a> 或评论区提问！</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
