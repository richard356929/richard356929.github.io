<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Chrome浏览器多开，账号独立运行</title>
      <link href="/2025/04/06/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E5%BC%80%EF%BC%8C%E8%B4%A6%E5%8F%B7%E7%8B%AC%E7%AB%8B%E8%BF%90%E8%A1%8C/"/>
      <url>/2025/04/06/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E5%BC%80%EF%BC%8C%E8%B4%A6%E5%8F%B7%E7%8B%AC%E7%AB%8B%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="使用多个独立-Chrome-实例的好处："><a href="#使用多个独立-Chrome-实例的好处：" class="headerlink" title="使用多个独立 Chrome 实例的好处："></a>使用多个独立 Chrome 实例的好处：</h2><ol><li>   账号隔离（多个 Google&#x2F;Facebook&#x2F;Twitter 账号互不干扰）。</li><li>   独立 Cookie 和缓存（防止自动登录错账户）。</li><li>   避免网站指纹追踪（适合营销、电商、广告推广）。</li><li>   防止崩溃影响所有 Chrome（每个实例独立运行）。</li><li>   提高工作效率（为不同任务创建不同的 Chrome 配置）。</li><li>   独立代理（使用不同 VPN 或 IP 访问不同站点）。</li><li>   适用于 Web3、加密货币交易、Dapp（多个钱包账户隔离）。</li></ol><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>步骤 1：创建用户数据文件夹 打开终端（快捷键 Command + Space，搜索 终端）。 创建用户数据目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/Chrome_Profiles/Profile_1</span><br></pre></td></tr></table></figure><p>步骤 2：创建 Chrome 启动脚本 创建文件（在终端中输入）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -na &quot;Google Chrome&quot; --args --user-data-dir=&quot;$HOME/Chrome_Profiles/Profile_1&quot;</span><br></pre></td></tr></table></figure><p>保存为 ～&#x2F;chrome_profiles.sh 赋予执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ~/chrome_profiles.sh</span><br></pre></td></tr></table></figure><p>步骤 3：运行脚本 在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/chrome_profiles.sh</span><br></pre></td></tr></table></figure><p>回车后，你会看到独立环境的 Chrome 浏览器实例被打开，使用指定的 Profile 目录。<br>步骤 4：创建桌面快捷方式<br>方法 ：使用 Automator finder中点击左侧 应用程序 找到Automator 选择 “应用程序” 类型。<br>然后 在左侧搜索 Shell 脚本，然后双击它。<br>在脚本框中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/chrome_profiles.sh</span><br></pre></td></tr></table></figure><p>点击 “文件” → “存储”：</p><p>选择 桌面 作为存储位置。</p><p>取名 “Chrome 多开.app”。 文件格式选择 “应用程序”，然后保存。 双击该应用，即可同时打开独立 Chrome 实例！</p><h2 id="windows上"><a href="#windows上" class="headerlink" title="windows上"></a>windows上</h2><p><strong>在d盘（或其他盘）创建两个文件夹</strong>：</p><p>• <strong>D:\fenliulanqi2\Chrome_UserData</strong> （存放 Chrome 用户数据）</p><p>• <strong>D:\fenliulanqi2\Chrome_ShortCuts</strong> （存放快捷方式）</p><p><strong>步骤 2：创建 PowerShell 脚本</strong></p><ol><li><p><strong>打开记事本</strong>（快捷键 Win + R，输入 notepad，回车）。</p></li><li><p><strong>复制以下代码</strong>（已修改成生成 10 个 Chrome 分身）：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-  </span><br><span class="line">  </span><br><span class="line"># Title: 自动生成多个具有独立环境的 Chrome 浏览器  </span><br><span class="line">  </span><br><span class="line"># Describe: d盘新建一个记事本文件，复制以下代码，保存为 chrome.ps1 ，  </span><br><span class="line">  </span><br><span class="line"># 菜单栏以管理员运行 PowerShell 运行，输入 d: 然后输入Set-ExecutionPolicy RemoteSigned 回车后获取权限输入y，  </span><br><span class="line">  </span><br><span class="line"># 输入命令 .\chrome.ps1 即可  </span><br><span class="line">  </span><br><span class="line"># 先建立两个文件夹并复制其路径，替换以下两个路径  </span><br><span class="line">  </span><br><span class="line">$UserDataPath = &quot;D:\fenliulanqi2\Chrome_UserData&quot; # 存放 Chrome 用户数据  </span><br><span class="line">  </span><br><span class="line">$FilePath = &quot;D:\fenliulanqi2\Chrome_ShortCuts&quot;    # 存放快捷方式图标，从这个文件夹里打开浏览器分身  </span><br><span class="line">  </span><br><span class="line"># 右键打开你桌面上的 Chrome 浏览器快捷方式，复制“目标”一栏的内容，替换下方路径  </span><br><span class="line">  </span><br><span class="line"># （注意：只复制 C:\Users\....\chrome.exe ，chrome.exe 后面的比如“--profile-directory”等字符不要复制）  </span><br><span class="line">  </span><br><span class="line">$TargetPath = &quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot;  </span><br><span class="line">  </span><br><span class="line"># 复制 Chrome 浏览器快捷方式的“起始位置”一栏的内容，替换下方路径  </span><br><span class="line">  </span><br><span class="line">$WorkingDirectory = &quot;C:\Program Files\Google\Chrome\Application&quot;  </span><br><span class="line">  </span><br><span class="line"># 设置生成分身的数量（从1到10）  </span><br><span class="line">  </span><br><span class="line">$array = 1..10  </span><br><span class="line">  </span><br><span class="line">foreach ($n in $array)  </span><br><span class="line">  </span><br><span class="line">&#123;  </span><br><span class="line">  </span><br><span class="line">    $x = $n.ToString()  </span><br><span class="line">  </span><br><span class="line">    $ShortcutFile = $FilePath + &quot;\Chrome_&quot; + $x + &quot;.lnk&quot; #  </span><br><span class="line">  </span><br><span class="line">    $WScriptShell = New-Object -ComObject WScript.Shell  </span><br><span class="line">  </span><br><span class="line">    $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.TargetPath = $TargetPath  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.Arguments = &quot;--user-data-dir=&quot; + $UserDataPath + &quot;\&quot; + $x  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.WorkingDirectory = $WorkingDirectory  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.Description = &quot;Chrome&quot; #备注，可以随便写  </span><br><span class="line">  </span><br><span class="line">    $Shortcut.Save()  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>保存文件</strong></li></ol><p>• 点击 <strong>文件 → 另存为</strong>。</p><p>• <strong>文件名：</strong> chrome.ps1</p><p>• <strong>保存类型：</strong> 选择 所有文件 (<em>.</em>)</p><p>• <strong>存放位置：</strong> D:\</p><p><strong>步骤 3：运行 PowerShell 脚本</strong></p><ol><li><strong>以管理员权限运行 PowerShell</strong></li></ol><p>• <strong>按 Win + X</strong>，选择 <strong>Windows 终端（管理员）</strong> 或 <strong>PowerShell（管理员）</strong>。</p><ol start="2"><li><strong>进入 D 盘</strong></li></ol><p>在 PowerShell 中输入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">d</span>:</span><br></pre></td></tr></table></figure><p>回车。</p><ol start="3"><li><strong>允许执行 PowerShell 脚本</strong></li></ol><p>输入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Set</span>-<span class="title class_">ExecutionPolicy</span> <span class="title class_">RemoteSigned</span></span><br></pre></td></tr></table></figure><p><strong>如果提示是否更改执行策略，输入 Y 并回车</strong>。</p><ol start="4"><li><strong>运行脚本</strong></li></ol><p>输入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\chrome.<span class="property">ps1</span></span><br></pre></td></tr></table></figure><p><strong>回车运行脚本</strong>，等待完成。</p><p><strong>步骤 4：运行 Chrome 分身</strong></p><p>• 打开 D:\fenliulanqi2\Chrome_ShortCuts，你会看到 10 个 Chrome 快捷方式，例如：</p><p>• Chrome_1.lnk</p><p>• Chrome_2.lnk</p><p>• …</p><p>• Chrome_10.lnk</p><p>• <strong>双击任意一个快捷方式，即可打开独立的 Chrome 环境！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> 多开 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Docker是什么？</title>
      <link href="/2025/04/02/1-Docker%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2025/04/02/1-Docker%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的容器化平台，用于快速打包、分发和运行应用程序。它通过将应用及其依赖封装在轻量级的容器中，实现环境隔离与跨平台一致性。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h3><ol><li><p><strong>镜像（Image）</strong>  </p><ul><li>类似虚拟机的快照，包含应用程序、依赖库和配置文件的静态模板。</li><li>例如：一个包含 Node.js 和项目代码的镜像。</li></ul></li><li><p><strong>容器（Container）</strong>  </p><ul><li>镜像的运行实例，轻量级且可快速启动&#x2F;停止。</li><li>多个容器共享宿主机内核，但彼此隔离。</li></ul></li><li><p><strong>仓库（Registry）</strong>  </p><ul><li>存储和分发镜像的中心仓库，如 Docker Hub（公共）或私有仓库。</li></ul></li></ol><h3 id="Docker-的优势"><a href="#Docker-的优势" class="headerlink" title="Docker 的优势"></a><strong>Docker 的优势</strong></h3><ol><li><p><strong>环境一致性</strong>  </p><ul><li>应用及其依赖被打包成容器，确保在任何环境中运行结果一致。</li></ul></li><li><p><strong>高效轻量</strong>  </p><ul><li>容器共享宿主机资源，相比虚拟机启动更快、资源占用更低。</li></ul></li><li><p><strong>易于部署</strong>  </p><ul><li>通过简单的命令（如 <code>docker run</code>）即可启动应用，无需手动配置环境。</li></ul></li><li><p><strong>弹性扩展</strong>  </p><ul><li>可快速复制容器实例以应对高负载，支持微服务架构。</li></ul></li></ol><h3 id="容器化技术的核心价值"><a href="#容器化技术的核心价值" class="headerlink" title="容器化技术的核心价值"></a><strong>容器化技术的核心价值</strong></h3><ul><li><strong>标准化交付</strong>：将应用及其依赖打包成镜像，确保环境一致性  </li><li><strong>轻量级运行</strong>：共享宿主内核，启动时间以秒计算（对比虚拟机分钟级）  </li><li><strong>快速迭代</strong>：镜像分层机制支持增量更新，构建时间显著缩短</li></ul><p><strong>容器化 vs 传统部署对比</strong>  </p><table><thead><tr><th>维度</th><th>传统部署</th><th>容器化部署</th></tr></thead><tbody><tr><td>环境配置</td><td>手动安装依赖</td><td>镜像预配置</td></tr><tr><td>启动速度</td><td>分钟级</td><td>秒级</td></tr><tr><td>资源占用</td><td>高（需独立OS）</td><td>低（共享内核）</td></tr></tbody></table><h3 id="Docker-vs-虚拟机"><a href="#Docker-vs-虚拟机" class="headerlink" title="Docker vs 虚拟机"></a><strong>Docker vs 虚拟机</strong></h3><p><strong>虚拟机架构</strong>  </p><pre><code>物理机 → Hypervisor → 虚拟机 → 操作系统 → 应用  </code></pre><p><strong>Docker架构</strong>  </p><pre><code>物理机 → Docker引擎 → 容器 → 应用（共享宿主OS内核）  </code></pre><p><strong>核心区别</strong>  </p><ul><li><strong>隔离性</strong>：虚拟机隔离OS，容器隔离进程  </li><li><strong>性能损耗</strong>：虚拟机≈10%，容器≈1%  </li><li><strong>资源占用</strong>：虚拟机GB级，容器MB级</li></ul><h3 id="Docker生态系统"><a href="#Docker生态系统" class="headerlink" title="Docker生态系统"></a><strong>Docker生态系统</strong></h3><p><strong>核心组件</strong>  </p><ol><li><p><strong>Docker Engine</strong>  </p><ul><li>服务端守护进程（dockerd）  </li><li>CLI客户端（docker命令行工具）</li></ul></li><li><p><strong>Docker Hub</strong>  </p><ul><li>全球最大镜像仓库（200万+官方&#x2F;社区镜像）  </li><li>支持镜像托管、自动化构建与协作</li></ul></li><li><p><strong>周边工具链</strong>  </p><ul><li><strong>Docker Compose</strong>：多容器编排  </li><li><strong>Docker Swarm</strong>：集群管理  </li><li><strong>Kubernetes</strong>：容器编排领域事实标准</li></ul></li></ol><h3 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a><strong>典型应用场景</strong></h3><ol><li><strong>Web服务部署</strong>：Nginx&#x2F;Node.js&#x2F;PHP等Web应用  </li><li><strong>CI&#x2F;CD流水线</strong>：代码构建→测试→部署全流程容器化  </li><li><strong>微服务架构</strong>：服务解耦与独立扩展（如电商平台的订单&#x2F;支付服务）  </li><li><strong>开发环境隔离</strong>：为不同项目提供独立的运行环境</li></ol><h3 id="快速入门示例"><a href="#快速入门示例" class="headerlink" title="快速入门示例"></a><strong>快速入门示例</strong></h3><pre><code class="language-bash"># 运行第一个Docker容器（以Nginx为例）docker run -d -p 80:80 --name my-nginx nginx:latest</code></pre><p><strong>执行结果解析</strong>  </p><ul><li><code>-d</code>：后台运行容器  </li><li><code>-p 80:80</code>：映射宿主80端口到容器80端口  </li><li><code>nginx:latest</code>：拉取最新版Nginx镜像</li></ul><h3 id="本章后续内容预告"><a href="#本章后续内容预告" class="headerlink" title="本章后续内容预告"></a><strong>本章后续内容预告</strong></h3><ol><li>第二节：为什么选择Docker？（环境一致性、资源优化、微服务支持）  </li><li>第三节：Docker安装全平台指南（Windows&#x2F;macOS&#x2F;Linux）</li></ol><p><strong>📌 提示</strong>：建议动手实践 <code>docker run hello-world</code> 命令，体验容器化技术的极简特性。遇到问题可参考 <a href="https://docs.docker.com/">Docker官方文档</a> 或评论区提问！</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
